INSTRUCTIVO DE INSTALACI√ìN Y DEPENDENCIAS ‚Äî PROYECTO OPINA

======================================================================
‚úÖ REQUISITOS PREVIOS
======================================================================
- Node.js ‚â• 18 (recomendado 20)  |  Comprobar: node -v
- npm (incluido con Node.js)     |  Comprobar: npm -v
- Flutter SDK ‚â• 3.x              |  Comprobar: flutter doctor

======================================================================
üñ•Ô∏è BACKEND (Node + Express + Socket.IO + Supabase)
======================================================================

1) Crear carpeta del backend
   mkdir opina-back && cd opina-back
   npm init -y

2) Instalar dependencias de producci√≥n
   npm i express socket.io @supabase/supabase-js dotenv helmet cors express-rate-limit morgan jsonwebtoken bcryptjs

3) Instalar dependencias de desarrollo
   npm i -D nodemon

4) Scripts recomendados en package.json
   {
     "type": "module",
     "scripts": {
       "dev": "nodemon",
       "dev:win": "nodemon -L",
       "start": "node src/server.js"
     }
   }

5) Archivo nodemon.json (reinicio autom√°tico)
   {
     "watch": ["src", ".env"],
     "ext": "js,json,env",
     "ignore": ["node_modules", "src/docs/*"],
     "exec": "node --enable-source-maps src/server.js",
     "delay": "100ms"
   }

6) Variables de entorno (.env)
   PORT=3000
   NODE_ENV=development
   JWT_SECRET=supersecreto
   JWT_EXPIRES=2d
   SUPABASE_URL=https://TU-PROYECTO.supabase.co
   SUPABASE_SERVICE_ROLE=eyJhbGciOi...   # NO subir a git
   CORS_ORIGINS=http://localhost:5173,http://localhost:3001

7) Ejecutar en desarrollo
   npm run dev
   (Windows si hay problema de file-watch: npm run dev:win)

======================================================================
üì± APP FLUTTER (REST + Socket.IO + .env + Provider)
======================================================================

1) Crear proyecto
   flutter create opina_app
   cd opina_app

2) Instalar librer√≠as
   flutter pub add http socket_io_client provider flutter_dotenv fl_chart flutter_secure_storage intl

3) Archivo de entorno (assets/.env)
   BASE_URL=https://tu-ngrok-o-servidor
   # (opcional) SOCKET_URL=wss://tu-ngrok-o-servidor

4) Registrar assets en pubspec.yaml
   flutter:
     uses-material-design: true
     assets:
       - assets/.env

5) Ejecutar
   flutter run -d chrome     # web
   flutter run -d windows    # escritorio
   flutter run -d macos      # escritorio
   flutter run -d linux      # escritorio
   flutter run -d <emulador-android>

======================================================================
üîå CONEXI√ìN FLUTTER <-> BACKEND
======================================================================

Dependiendo de d√≥nde corras el backend (Node.js):

PC / Web:
  flutter run -d chrome --dart-define=BACKEND_BASE=http://localhost:3000

Emulador Android:
  flutter run --dart-define=BACKEND_BASE=http://10.0.2.2:3000

Celular f√≠sico por USB (sin ngrok):
  adb reverse --remove-all
  adb reverse tcp:3000 tcp:3000
  flutter run --dart-define=BACKEND_BASE=http://127.0.0.1:3000

Celular f√≠sico por Internet (con ngrok activo):
  ngrok http 3000
  flutter run --dart-define=BACKEND_BASE=https://<TU-NGROK>.ngrok-free.app

======================================================================
üì° EVENTOS DE WEBSOCKETS (Convenci√≥n para Dashboard Tiempo Real)
======================================================================

Servidor -> Cliente:
- "kpis:actualizado"      payload ej: { "seccion":"calidad", "total":123, "promedio":4.2 }

Cliente -> Servidor:
- "kpis:unirse"           payload: "calidad" | "infraestructura" | "experiencia"

Salas (server):
- "sala:kpi:calidad"
- "sala:kpi:infraestructura"
- "sala:kpi:experiencia"

======================================================================
üì¶ RESUMEN DE LIBRER√çAS INSTALADAS
======================================================================

Backend:
- express, socket.io, @supabase/supabase-js
- dotenv, helmet, cors, express-rate-limit, morgan
- jsonwebtoken, bcryptjs
- (dev) nodemon

Flutter:
- http, socket_io_client, provider, flutter_dotenv
- fl_chart, flutter_secure_storage, intl

======================================================================
FIN DEL INSTRUCTIVO
======================================================================
